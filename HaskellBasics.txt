If negative numbers are being dumb, try wrapping - in parens
  -3 --> (-3)

Control Flow:

  Loops are evil b/c functional programming

  For if statements, an else statement is mandatory
    (it must return something)

  Parenthesis for if statements are optional

  if x == 2 then x
  else x+1

  if (x == 0) then "Zero"
  else if (odd x) then "Odd"
  else "Even"

Functions in Haskell:
  infix functions: the function is placed between operands
    and surrounded by backticks, good for readability

    2 + 4
    9 `div` 3
    17 `mod` 4
    
  prefix functions: the function is placed before operands
  
    In Haskell, functions are separated by spaces and operands are 
      separated by spaces as well 
    The spaces are for "functional application"
    
    bar (bar 3) in Haskell is like bar(bar(3)) in C
  
    succ 8
      succ is the successor function and returns the successor to the operand
    min 9 10
    9

    odd 7
    True
    even 7
    False

Lists:
  lists are homogenous in Haskell (all must be same type)
  strings are lists
  someNumbers = [4,5,2,43,56,0]

  Concatenating Lists: Use ++ operator
    ['w', 'o'] ++ ['o', 't']
    resolves to "woot"

  Access element of a list by index: use !! operator

    "Steve Buscemi" !! 6
    resolves to 'B'

  Lists can contain lists of lists of ... recursion bruh
    The sublists can be of varying lengths but each sub list
      must be the same type

  : is the "cons" operator

Common List Functions:

  head: return first element

    head [5,4,3,2,1]
    5

  tail: return every element that isn't the head

    tail [5,4,3,2,1]
      [4,3,2,1]

  last: return last element


  init: return a list with everything except it's last element

  Empty lists are bad and won't be caught at compile time

  length: return the length of the list

    length [7,4,3,2,1]
    5

  null: Boolean check to see if the list is empty
    (Use this instead of == [])
    null []
    True
    null ['a', 'b', 'c']
    False


  reverse: reverses a list
  
    reverse [5,4,3,2,1]
    [1,2,3,4,5]


  take: Extracts a number of elments from the beginning of a list
    Useful for infinite lists

    take 3 [5,4,3,2,1]
    [5,4,3]

    take 0 [6,6,6]
    0

    This will take the first 10 multiples of 13
    take 10 [13,26,..]

  takeWhile: Take as many elements from a list as long as
    a predicate holds

    takeWhile (<4) [1..10]
    [1,2,3]

  drop: Removes a number of elements from the beginning of the list

    drop 3 [8,4,2,1,5,6]
    [1,5,6]

  maximum: returns the biggest element of a list
  minimum: returns the smallest element of the list
  sum: takes a list of numbers and returns the sum
  product: takes a list of numbers and returns their product
    (think of capital pi for product)

  product [6,2,1,2]
  24

  elem: Checks if an element is an element of a list

    Typically written in infix fashion for readability

    4 `elem` [3,4,5,6]
    True

    10 `elem` [3,4,5,6]
    False

  concat, concatMap


Generating Lists:

  You can use .. to specify Haskell to auto generate a sequence
    similar to slicing in Python but last element is included

  [1..20]
  [1,2,3,4, all the way up to and including 20 ]

  ['a'..'z']
  [lowercase alphabet]

  [20,19..1]
  [20, 19, 18 all the way down to and including 1]

  You can specify an integer step as well by specifying the first
    two elements and then writing ..

  Count by 2
  [2,4,..20]
  Count by 3
  [3,6..20]
  [3,6,9,12,15,18]

  Haskell has the concept of infinite lists. You define the list
    and because of lazy evaluation the list doesn't generate an 
    infinite number of elements, it only creates the elements when
    you grab elements from the list
  A typical case is to define an infinite list and then `take` 
    some number of elements from the infinite list

    Take the first 10 elements of multiples of 13

      take 10 [13, 26..]

 
  Infinite List Commands:

    cycle: takes a finite list and creates an infinite list
      from it by repeating the list in order

      take 10 (cycle [1,2,3])
      [1,2,3,1,2,3,1,2,3,1]

      take 12 (cycle "LOL ")
      "LOL LOL LOL "

   repeat: Takes an element and produces an infinite list of 
      just that element

      take 10 (repeat 5)
      [5,5,5,5,5,5,5,5,5,5]

   replicate: Takes an element an returns a list containing
      a specified number of copies of it
      
      replicate num_of_copies elem_to_replicate
      replicate 3 10
      [10, 10, 10]

   nub: Removes duplicate entries from the list...O(n^2)

List Comprehension:

You can define lists in a manner to how sets are defined in math

  -- Double each element from the set of integers from 1 to 10, inclusive
  [x*2 | x <- [1..10]]
  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

    The <- acts as the 'element of' operator in math
    Think of | as 'such that'

  -- You can add a predicate (condition) within a set for filtering
  -- Double each element from the set of integers from 1 to 10,
  --  inclusive, but the the doubled element must be >= 2
  [x*2 | x <- [1..10], x*2 >= 12]


  -- For each element that the predicate matches, the expression
  --  on the left of | is is evaluated and added to the new list
  --  being generated

  -- A really silly length function that showcases the above sentence
  sum [1 | _ <- [24..60]]
  37

  -- all elements from 50..100 that have mod 7 == 3
  [x | x <- [50..100], x `mod` 7 == 3]

  -- You can have multiple predicates
  -- Ints 10 to 20, not including 13, 15, or 19
  [x | x <- [10..20], x /= 13, x /= 15, x /= 19]
  [10, 11, 12, 14, 16, 17, 18, 20]

  -- You can draw from multiple lists (easy cartesian product)
  [x*y | x <- [2,5,10], y <- [8,10,11]]

  -- Remember strings are lists, so you can use string comprehensions
  --  for string operations
      

Tuples:

  tuples don't have to homogenous

  zip: Take two lists and create a list of tuples by combining elements
    from each set that appear in the same order

    zip [1,2,3,4,5] [5,5,5,5,5]
    [(1,5), (2,5), (3,5), (4, 5), (5,5)]

    zip [1..] ["apple", "orange", "grape"]
    [(1, "apple"), (2, "orange"), (3, "grape")]

Functions:

  Basic function definition
  
  funcName :: arg1-type -> result-type
  funcName arg1 = some expression using args

  doubleUs x y = 2*x + 2*y

Comments:

  Comments in Haskell are designated by --

  -- ASDFASDFSDASDFADS Some comment here
  x = 1
